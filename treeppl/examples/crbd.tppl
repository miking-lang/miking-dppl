/**  Constant-rate birth-death model */

/**  Phylogenetic tree */
// types, Section 0.4
type tree =
    | Leaf(age: float, index: int)
    | Node(age: float, left: tree, right: tree)

  
/**  Simulates side branches under the CRBD model
 *  
 * The following is a function that simulates the hidden
 * (extinct or undetected) evolutionary side-branches under
 * the CRBD model.
 * 
 * functions, see Section 0.2
 * 
 * In particular, it is clear that the return type of this
 * function is unit, as no explicit return specified and
 * it is a sequence of statements rather than a simple expression.
 */
simulate_side_branch = (start_time: float, λ: float, μ: float): () => {
    t ~ Exponential(rate=λ + μ) // sampling, section 1.2
    current_time = start_time - t // expressions, Section 0.1
    if (current_time < 0) { // conditionals, Section 0.5
        factor(-∞)
    } else {
        s ~ Bernoulli(λ/(λ + μ)) // positional invocation
        if (s) {
            simulate_side_branch(current_time, λ, μ) 
            simulate_side_branch(current_time, λ, μ)
        }
    }   
}



simulate_tree = (child: tree, parent: tree, λ: float, μ: float) => {
    #resample

    // k is the number of hidden speciation events
    k ~ Poisson(λ*(parent.age - child.age))

    // loops, Section 0.6
    // here, we don't have an index i
    // <=> for (i in 1 to k)
    for (1 to k) {
        t ~ Uniform(l=child.age, u=parent.age)
        simulate_side_branch(t, λ, μ)
        factor(log(2))
    }

    // Observe Section 1.2
    // 0 extinctions events along the branch
    observe 0 ~ Poisson(μ*(parent.age - child.age))

    // pattern matching, Section 0.6
    switch (child) {
        | Node => {
            observe 0 ~ Exponential(λ)
            simulate_tree(child.left, child, λ, μ)
            simulate_tree(child.right, child, λ, μ)
        }
    }
    
    return ()
}

/** Model 
 * 
 * Every program has a model function, see Section 1.4.
 * */ 
model = (k_λ = 1, θ_λ = 0.2, k_μ = 1, θ_μ = 0.1, data: json) => {
    observation: tree = Node(13.016,
        Node(10.626,Node(8.352,Node(7.679,Node(5.187,Leaf(0,7),Leaf(0,22)),Node(5.196,Leaf(0,2),Node(4.871,Node(2.601,Leaf(0,31),Leaf(0,14)),Leaf(0,26)))),Node(7.361,Node(3.818,Node(1.143,Node(0.829,Leaf(0,6),Leaf(0,9)),Leaf(0,16)),Node(1.813,Node(0.452,Node(0.203,Leaf(0,15),Leaf(0,12)),Leaf(0,8)),Leaf(0,32))),Node(1.868,Node(0.866,Leaf(0,23),Node(0.001,Leaf(0,17),Leaf(0,24))),Node(1.06,Leaf(0,18),Leaf(0,4))))),Node(10.536,Node(8.291,Node(1.396,Node(0.215,Leaf(0,10),Leaf(0,29)),Leaf(0,21)),Leaf(0,27)),Node(8.192,Node(0.56,Leaf(0,11),Leaf(0,19)),Leaf(0,3)))),
        Node(8.958,Node(3.748,Leaf(0,5),Node(0.033,Leaf(0,20),Leaf(0,1))),Node(7.775,Node(0.584,Leaf(0,28),Leaf(0,13)),Node(1.589,Leaf(0,25),Leaf(0,30))))
    )

    // TODO implement phyjson2tree
    // observation = phyjson2tree(data)

    λ ~ Gamma(k_λ, θ_λ)
    μ ~ Gamma(k_μ, θ_μ)

    simulate_tree(observation.left, observation, λ, μ)
    simulate_tree(observation.right, observation, λ, μ)
    return (λ, μ)
}
