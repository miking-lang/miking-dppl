/**
 * Functions and types
 * *
 * TreePPL should have a type system in order to make debugging easier.
 * Types are
 *
 * a. optional, i.e. type annotations, for example in function declaration possible but not necessary
 * b. inferred
 * 
 * let a = "hello"
 * 
 * a is a string */

/**
 *  Sample function declaration 
 *    alternative syntax commented out */

let simple_evolution_model = function(a: TypeA, b: TypeB) => TypeC

function simple_evolution_model(a: TypeA, TypeB) : TypeC

simple_evolution_model(
    observed_nucleotide:   Phylo.Nucleotide,
    sequencing_accuracy_p: Probability = 0.9, // default value
//  sequencing_accuracy_p: Real in [0, 1],
//  sequencing_accuracy_p: Real passes positive_probability,
    Q: Phylo.InstantaneousRateMatrix,
//  Q: Real[][] passes check_QT,
    time: Real,
    Î¼: Real in [0, Infinity)
): Phylo.Nucleotide // return value of the function
{
  return Phylo.A
}


/**
 * Arguments to functions can be labeled (like R, Python...)
 * Labelling is optional
 * Arguments can have default values
 *  Reordering the named values should be possible
 *  mixing of keyword and positional arguments should be possible
 *  Example:
 * foo( mean = mu, sd = sigma )
 */


