/**
 * @file
 *   Nucleotide evolution example
     TreePPL writeup *
 * 
 */




/**  
 * Nucleotide evolution model in phylogenetic WebPPL
 *
 * Parameterizes the nucleotide evolution model with
 * a particular observation and a substitution model.
 * 
 * @param observed_nucleotide :
 *     The nucleotide that was observed. 
 *     One of "A", "C", "G", or "T"
 * @param sequencing_accuracy_p  : 
 *     The probability of having sequenced the observed 
 *     nucleotide correctly. Between 0 and 1.
 * @param Q
 *     Transition matrix as given by a substition model.
 * @param time  Evolution time.
 * @param mu    Rate of molecular substitution.
 *
 *
 * @return
 *     A model object to be used by Infer.
 * 
 */


// several ideas here
// function arguments typed
// function return value typed
// proposed a Nucleotide type, essentially the set
// {A, C, T, G, ...}
// proposed a real type with bound restrictions
// proposed a matrix type

function simple_evolution_model(observed_nucleotide   : Nucleotide,
				sequencing_accuracy_p : Real[0, 1],
				Q : Matrix,
				time: Real,
				mu: real > 0) : Nucleotide
{
    // prose to use let instead of var
    // automatic typeinference, start_type will be of the nucleotide type by being
    // one of A, T, C, G
    let start_nucleotide = sample(
	Categorical(   ps: [0.25, 0.25, 0.25, 0.25],   vs: [Nucleotide.A, Nucleotide.T, Nucleotide.C, Nucleotide.G])
    )	

    // type of P is whatever transition_probabilities returns
    let P = transition_probabilities(Q)

    let end_nucleotide = evolve(start_state, time, Q, P, mu)

    let remaining_nucleotides = { Nucleotide.A, Nucleotide.T, Nucleotide.C, Nucleotide.G } \ end_nucleotide
    // now remaining nucleotides are the nucleotides except the end state
    
    let dist = Categorical( ps: [  (1 - sequencing_accuracy_p)/3,
					 (1 - sequencing_accuracy_p)/3,
					 (1 - sequencing_accuracy_p)/3,
					 sequencing_accuracy_p ] ,
				  vs: remaining_nucletides + end_state ) )
// the plus here is concantenation


	observe(dist, observed_nucldeotide)
	
	return start_nucleotide //decode    
    }
}






/** Probabilistic nucleotide evolution model
 *
 * @param starting_state : the initial nucleotide state
 * @param starting_time  : starting time in the past
 * @param Q              : rate matrix
 * @param P              : transition probability matrix
 * @param mu             : rate of molecular substitution
 *
 * @return : the present state as modeled by a 
 *                                  probabilistic process
 */
var evolve = function(starting_state, starting_time, Q, P, mu)
{
    var S = [ [1, 2, 3],
	      [0, 2, 3],
	      [0, 1, 3],
	      [0, 1, 2] ]

    var possible_next_states = S[starting_state]

    // The waiting time until the transition is given by the negative
    // of the diagonal of the transition matrix
    var lambda = -mu*Q[starting_state][starting_state]
    var t = sample(Exponential(
	{
	    a: lambda
	}
    ))
    
    if (starting_time - t < 0) {
	// no transition
	return starting_state
    }

    var new_state = sample(Categorical(
	{
	    ps: P[starting_state],
	    vs: possible_next_states
	}
    ))

    return evolve(new_state, starting_time - t, Q, P, mu)
}



/** 
 * Calculate transition probabilities
 * 
 * @param Q : rate matrix
 * 
 * @return : a matrix encoding the transition probabilities
 *           from one state to another 
 *
 */
var transition_probabilities = function(Q)
{
    
    var P = [ [-Q[0][1]/Q[0][0], -Q[0][2]/Q[0][0], -Q[0][3]/Q[0][0] ],
	      [-Q[1][0]/Q[1][1], -Q[1][2]/Q[1][1], -Q[1][3]/Q[1][1] ],
	      [-Q[2][0]/Q[2][2], -Q[2][1]/Q[2][2], -Q[2][3]/Q[2][2] ],
	      [-Q[3][0]/Q[3][3], -Q[3][1]/Q[3][3], -Q[3][2]/Q[3][3] ] ]
    
    return P
}



/** Jukes and Cantor 1969 Substitution Model, Scaled
 * 
 * @return Q : transition matrix according to JC69
 */
var jc69 = function() {
    return [ [ -1, 1/3, 1/3, 1/3 ],
	     [ 1/3, -1, 1/3, 1/3 ],
	     [ 1/3, 1/3, -1, 1/3 ],
	     [ 1/3, 1/3, 1/3, -1 ] ]
}



/** Hasegawa, Kishino and Yano 1985
 *
 * @param p : a vector of base frequencies
 * @param k : kappa parameter
 *
 * @return scaled Q matrix
 */
var hky85 = function(p, k)
{
    var f = 1/(
	2*(p[0] + p[2])*(p[1] + p[3]) + 2*k*(p[0]*p[2] + p[1]*p[3])
    )
    
    var Q = [ [ -f*(p[1] + k*p[2] + p[3]), f*p[1], f*k*p[2], f*p[3] ] ,
	      [ f*p[0], -f*(p[0] + p[2] + k*p[3]) , f*p[2] , f*k*p[3] ] ,
	      [ f*k*p[0], f*p[1], -f*(k*p[0] + p[1] + p[3]), f*p[3] ],
	      [ f*p[0], f*k*p[1] , f*p[2] , -f*(p[0] + k*p[1] + p[2]) ] ]

    return Q
}



/** Generalized Time-Reversible
 *
 * @param p : base frequency vectoir
 * @param r : rates vector
 *   The rates frequency vector encodes the transitions as follows
 *   r[0] : A -> C (alpha) 0 -> 1
 *   r[1] : A -> G (beta)  0 -> 2
 *   r[2] : A -> T (gamma) 0 -> 3
 *   r[3] : C -> G (delta) 1 -> 2
 *   r[4] : C -> T (eta)   1 -> 3
 *   r[5] : G -> T (nu)    2 -> 3
 *
 *
 * return Q : transition matrix
 */
var gtr = function(p, r)
{
   var Q = [ [ -(r[0]*p[1] + r[1]*p[2] + r[2]*p[3]), r[0]*p[1], r[1]*p[2], r[2]*p[3] ],
                 [ r[0]*p[0], -(r[0]*p[0] + r[3]*p[2] + r[4]*p[3]), r[3]*p[2], r[4]*p[3] ],
	         [ r[1]*p[0], r[3]*p[1], -(r[1]*p[0] + r[3]*p[1] + r[5]*p[3]), r[5]*p[3] ],
		 [ r[2]*p[0], r[4]*p[1], r[5]*p[2], -(r[2]*p[0] + r[4]*p[1] + r[5]*p[2]) ] ]

   var f = -1/(
	    p[0]*Q[0][0] + p[1]*Q[1][1] * p[2]*Q[2][2] + p[3]*Q[3][3]
	)

   return [ [ f*Q[0][0], f*Q[0][1], f*Q[0][2], f*Q[0][3] ],
	      [ f*Q[1][0], f*Q[1][1], f*Q[1][2], f*Q[1][3] ],
	      [ f*Q[2][0], f*Q[2][1], f*Q[2][2], f*Q[2][3] ],
	      [ f*Q[3][0], f*Q[3][1], f*Q[3][2], f*Q[3][3] ] ] 
}



/* Model setup and inference */
var observed_nucleotide = "A"
var sequencing_accuracy_p = 0.9
var time = 2
var mu = 0.2

var Q = gtr([1/4, 1/4, 1/4, 1/4], [1, 1, 1, 1, 1, 1]) // can have other functions here
//var Q = jc69() 
//var Q = hky85([1/4, 1/4, 1/4, 1/4], 1) // should be the same as jukes cantor

var model = make_evolution_model(observed_nucleotide, sequencing_accuracy_p, Q, time, mu)

var dist = Infer( { method: 'SMC', particles: 10000, rejuvSteps: 5,
         model: model } )

//viz(dist) // in browser

dist.sample()  // on command line
