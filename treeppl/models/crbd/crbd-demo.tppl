/**  
 *  Constant-rate birth-death model 
 *  Demo program 00000
 */

/** Compiler hints, see Section 1.3 */
//~PARTICLES: 10000
//~SWEEPS: 10

/** 
 *  Phylogenetic tree 
 *  Types, Section 0.4 
 */
// Built-in type
//type Tree =
//    | Leaf(age: Real, index: Int)
//    | Node(age: Real, left: Tree, right: Tree, index: Int)


/**
*  A Coin Flip
*  @param p  Probability of heads
*  @return whether the coin landed heads
*/
function flip(p: Real): Bool {
    // assert(0 <= p <= 1)    later version
    e ~ Bernoulli(p)
    return(e)
}    

/**  
 *   Simulates side branches under the CRBD model
 * 
 *   The following is a function that simulates the hidden
 *   (extinct or undetected) evolutionary side-branches under
 *   the CRBD model.
 * 
 *   functions, see Section 0.2
 * 
 *   In particular, it is clear that the return type of this
 *   function is unit, as no explicit return specified.
 *
 *  @param start_time
 *  @param lambda
 *  @param mu
 *  @return Nothing
 */ 
function simulate_side_branch(start_time: Real, lambda: Real, mu: Real) {
    assume waiting_time ~ Exponential(lambda + mu)
    let current_time = start_time - waiting_time // expressions, Section 0.1
    if current_time < 0 { // conditionals, Section 0.5
        weight(0) // <=> log_weight(-inf)
    } else {
        if flip(lambda/(lambda + mu)) {
            simulate_side_branch(current_time, lambda, mu) 
            simulate_side_branch(current_time, lambda, mu)
        }
    }   
}

/**
 * Jan's Walk Over the Tree
 */
function simulate_tree(child: Tree, parent: Tree, lambda: Real, mu: Real) {
    //~RESAMPLE
    // k is the number of hidden speciation events
    k ~ Poisson(lambda*(parent.age - child.age)) // assume construct, .age without if is

    /* Loops, Section 0.6
       0 indexing of arrays.
       Here, we don't have an index i.
       E.g.: for i in 1 to k
       lst = 1 to 3
       for x in lst
       1 to k == [1, 2, 3, ..., k] */

   // 1 to k // compile error: we don't support a to b except in for loops   
   // two syntaxes : over an integer range, or over an explicitly defined sequence
    for _ in 1 to k {
        t ~ Uniform(child.age, parent.age)        // positional arguments (now v1.0, names later)
        simulate_side_branch(t, lambda, mu)       // side effect on the weight
        weight(2) //  <=> log_weight(log(2)) 
    }

    // Observe Section 1.2
    // 0 extinctions events along the branch
    observe 0 ~ Poisson(mu*(parent.age - child.age))

    // if ... is ..., Section 0.6
    if child is Node {
        observe 0 ~ Exponential(lambda)
        simulate_tree(child.left, child, lambda, mu)
        simulate_tree(child.right, child, lambda, mu)
    }
    
    // Explicit returns if we want the function to return a value.
    // If the end of the function has been reached without an explicit return,
    // the return type is unit, ()
}

/** 
 *  Model 
 * 
 *  Every program has a model function, see Section 1.4.
 *
 *  - The function signature contains type annotations (postfix) for input (required) and return (not required unless recursive) 
 *  - Default arguments (later, not in 1.0)
 *  - Types are Capitalized
 *  - Unicode is supported for identifiers within the model, but the interface to the world is ASCII
 *  
 *  @param k_l shape of Gamma distribution for prior λ
 *  @param t_l scale of Gamma distribution for prior λ
 *  @param k_m shape of Gamma distribution for prior μ
 *  @param t_m scale of Gamma distribution for prior μ
 *
 *  @return {lambda: Real, mu: Real}
 */ 
model function crbd(k_l: Int, t_l: Real, k_m: Int, t_m: Real, observation: Tree) {
    lambda ~ Gamma(k_l, t_l)
    mu ~ Gamma(k_m, t_m)
    if observation is Node {
        simulate_tree(observation.left, observation, lambda, mu)
        simulate_tree(observation.right, observation, lambda, mu)
    } 
    return {lambda, mu}
    // return {lambda = 1.0, mu = 4.0}
    //return {lambda = lambda, mu = mu} // long-winded way 
    //return {mu, lambda} // still correct!
}




