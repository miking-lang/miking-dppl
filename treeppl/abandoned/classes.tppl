type Rate = number passing (λ => λ > 0)
type Probability = number passing (p => 0 <= p && p <= 1)  // alt. 0 <= p <= 1

class CRBD extends BirthDeathModel {
  λ: Rate
  ε: Probability
  
  initial() {
    this.λ ~ Gamma(shape=1, scale=1)
    this.ε ~ Uniform(0, 1)
  }
  
  simulate(node: TreeNode) {
    c ~ Poisson(rate=this.λ*node.edgeLength)
    repeat(c) {
      let t ~ Uniform(node.tEnd, node.tBeg)
      this.simulate(t)
      factor(2, isLog=false)
    }
    observe 0 ~ Poisson(rate=this.λ*this.ε*node.edgeLength)
    if (node.isSpeciation()) {
      observe 0 ~ Exponential(this.λ)
    }
  }
  
  protected simulate(tBeg: number) {
    Δ ~ Exponential(rate=this.λ*this.ε)
    tEnd = tBeg - Δ
    if (tEnd < 0) {
      factor(0, isLog=false)
    } else {
      c ~ Poisson(rate=this.λ*(tBeg-tEnd))
      repeat(c) {
        τ ~ Uniform(to=tBeg, from=tEnd)
        this.simulate(τ)
      }
    }
  }
}




