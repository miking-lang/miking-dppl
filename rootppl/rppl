#!/usr/bin/env bash

# TODO Hard-coded location, not that elegant. Solutions? Maybe replace with sed
# or add in install script?
engine_src=~/.local/src/rootppl/

# Runtime
engine_build=build/

# Argument parsing
args=()
flags="-I$engine_src -std=c++14 -O3"
while [[ $# -gt 0 ]]; do
  case $1 in
    -j|--jobs)
      flag_jobs="$1 $2"
      shift
      shift
      ;;
    --target) # Alternatives: cpu, omp, sm_* (e.g., sm_75)
      target="$2"
      shift
      shift
      ;;
    --cxx)
      cxx="$2"
      shift
      shift
      ;;
    --stack-size)
      flags+=" -D STACK_SIZE_PROGSTATE=$2"
      shift
      shift
      ;;
    --ess-threshold)
      flags+=" -D ESS_THRESHOLD=$2"
      shift
      shift
      ;;
    --extra-file-output)
      flags+=" -D EXTRA_FILE_OUTPUT"
      shift
      ;;
    -w|-g|-O)
      flags+=" $1"
      shift
      ;;
    *) # unknown option
      args+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

case $target in
  sm_*)
    cxx=nvcc
    flags+=" -arch=$target -rdc=true -lcudadevrt"
    ;;
  cpu|*)
    cxx=${cxx:-g++}
    flags+=" -xc++"
    link="-x none"
    ;;&
  omp)
    flags+=" -fopenmp"
    ;;
esac

# Write makefile variables to build/config.mk, unless it already exists and is
# equal. This config.mk file is used as a dependency for building the RootPPL
# engine.
mkdir -p ${engine_build}
old=${engine_build}config.mk
new=${engine_build}tmp
cat <<EOT >> $new
CXX=$cxx
FLAGS=$flags
EOT
if ! ([ -f $old ] && cmp $old $new &> /dev/null); then
  cp -f $new $old
fi
rm -f $new

# Build RootPPL engine
${engine_src}build.mk \
  $flag_jobs\
  SRC="$engine_src"\
  BUILD="$engine_build"\
  || exit 1

# Build project and link it with RootPPL engine
read -r -d '' cmd << EOM
$cxx \
  $flags \
  ${args[@]} \
  $link $(find $engine_build -name *.o)
EOM
echo $cmd
$cmd
