// WebPPL tree inference algorithm

// With delayed sampling working properly
// and the CTMC distribution implemented
// correctly, an SMC algorithm applied to
// this program should be fairly efficient.

// The SMC algorithm would in that case
// essentially be the same algorithm
// as the one described in Bouchard-Côté et al
// (2012) (needs checking).


/////// Constants ////////

// Avoid computing the same logs repeatedly
var log_two = Math.log( 2.0 );
var log_twenty = Math.log ( 20.0 );


///////// Help functions /////////////

// Tree leaf constructor
var leaf = function( index, states )
{
    return { type: "leaf", index: index, age: 0.0, states: states };
}

// Tree node constructor
var node = function( left, right, age, states )
{
    return { type: "node", left: left, right: right, age: age, states: states };
}

// Sample n values iid from a given distribution dist
var sample_iid = function( dist, n )
{
    if ( n > 1 )
        return sample_iid( dist, n-1 ).concat( sample( dist ) );
    else
        return [ sample( dist ) ];
}

// Observe desc states iid from a binary CTMC after time t given anc states
// Here we compute categorical distributions for each of the starting states
var observe_iid_ctmc = function( anc, time, desc )
{
    var p00 = 0.5 + 0.5 * Math.exp( - 2.0 * time );
    var p01 = 0.5 - 0.5 * Math.exp( - 2.0 * time );
    var p10 = p01;
    var p11 = p00;
    var dist0 = Categorical( { ps: [ p00, p01 ], vs: [ 0, 1 ] } );
    var dist1 = Categorical( { ps: [ p10, p11 ], vs: [ 0, 1 ] } );

    observe_iid_ctmc_n( anc, dist0, dist1, desc, desc.length - 1 )
}

// Recursive function to observe iid draws from a binary CTMC
var observe_iid_ctmc_n = function( anc, dist0, dist1, desc, n )
{
    var dist = (anc[n] == 0 ? dist0 : dist1);

    observe( dist, desc[n] );

    if ( n >= 1 )
        observe_iid_ctmc_n( anc, dist0, dist1, desc, n - 1 );
}

// Recursive function to observe iid draws of discrete states from a given distribution
var observe_iid = function( dist, states, n )
{
    observe( dist, states[n] );
    if ( n >= 1 )
        observe_iid( dist, states, n - 1 );
}

// Recursive function to convert a tree to a Newick string (with ages and not branch lengths)
var tree_to_Newick = function( tree )
{
    if ( tree.type == "leaf" )
        return tree.index + ":" + tree.age;
    else
        return "(" + tree_to_Newick( tree.left ) + "," + tree_to_Newick( tree.right ) + "):" + tree.age;
}

// Recursive function to convert a tree topology to a Newick string
var top_to_Newick = function( tree )
{
    if ( tree.type == "leaf" )
        return tree.index;
    else
        return "(" + top_to_Newick( tree.left ) + "," + top_to_Newick( tree.right ) + ")";
}


//////// Data //////////

// Specify the data we have
var D = [ [ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
          [ 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
          [ 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
          [ 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ] ];

// Define the leaves
var leaves = [ leaf(0, D[0]), leaf(1, D[1]), leaf(2, D[2]), leaf(3, D[3]) ]
console.log( "0: " + leaves[0].states );
console.log( "1: " + leaves[1].states );
console.log( "2: " + leaves[2].states );
console.log( "3: " + leaves[3].states );

//////// Core model functions //////////

// Recursive function to randomly build a tree
var cluster = function( trees, max_age )
{
    // Check if we are done
    if ( trees.length <= 1 )
        return trees;

    // Pick two random trees in the trees vector
    var k1 = randomInteger( trees.length );
    var k2 = ( trees.length > 1 ? randomInteger( trees.length - 1 ) : 0 );
    var k3 = ( k2 == k1 ? trees.length - 1 : k2 );
    var i = Math.min( k1, k3);
    var j = Math.max( k1, k3);

    // Combine into a new node; propose s (states) and t (extra age) from
    // suitable distributions that are factored out
    var s = sample_iid( Categorical( {ps: [0.5, 0.5], vs: [0, 1]} ), trees[i].states.length );
    factor( log_two * s.length );

    // Pick a new node age
    var t = exponential( {a: 20.0} );
     var node_age = max_age + t;
    var new_node = node( trees[i], trees[j], node_age, s );

    // Observe states iid from continuous time Markov chain (CTMC)
    observe_iid_ctmc( new_node.states, new_node.age - trees[i].age, trees[i].states );
    observe_iid_ctmc( new_node.states, new_node.age - trees[i].age, trees[i].states );

    // Compute new_trees vector
    var vec_a = trees.slice( 0, i );
    var vec_b = trees.slice( i + 1, j );
    var vec_c = trees.slice( j + 1, trees.length );
    var new_trees = [ new_node ].concat( vec_a, vec_b, vec_c );

    // cluster new_trees
    cluster( new_trees, node_age );
}

// Define model
var model = function ()
{
    // Build the tree by random clustering
    var tree = cluster( leaves, 0.0 )[ 0 ];

    // Assumption about the draw of root states
    var dist = Categorical( { ps: [0.8, 0.2], vs: [0, 1] } );
    observe_iid( dist, tree.states, tree.states.length - 1 );

    // Convert tree to readable format
    var tree_string = top_to_Newick( tree );

    // Return tree
    return tree_string;
}

///////// Inference ////////

// Do inference
var dist = Infer( {model: model, method: 'SMC', particles: 10000 } );
dist;


