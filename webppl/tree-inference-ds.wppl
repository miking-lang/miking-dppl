// WebPPL tree inference algorithm

// Delayed sampling and CTMC distribution
// hard-coded to check potential
// efficiency of the SMC algorithm


/////// Constants ////////

// Avoid computing the same logs repeatedly
var log_two = Math.log( 2.0 );
var log_twenty = Math.log ( 20.0 );


///////// Help functions /////////////

// Convert states to state probs
var states_to_probs = function( states, n )
{
    var p0 = ( states[n] == 0 ? 1.0 : 0.0 );
    var p1 = ( states[n] == 1 ? 1.0 : 0.0 );

    if ( n == 0 )
        return [ p0, p1];
    else
        return states_to_probs( states, n-1 ).concat( p0, p1 );
}

// Tree leaf constructor
var leaf = function( index, states )
{
    var state_probs = states_to_probs( states, states.length - 1 );
    var log_prob    = Math.log( 0.5 ) * states.length;

    return { type: "leaf", index: index, age: 0.0, states: states, state_probs: state_probs, log_prob: log_prob };
}

// Tree node constructor
var node = function( left, right, age, state_probs, log_prob )
{
    return { type: "node", left: left, right: right, age: age, state_probs: state_probs, log_prob: log_prob };
}

// Compute log probability from state probabilities
var compute_log_prob_n = function( state_probs, n )
{
    if ( n <= 0 )
        return 0.0;

    return Math.log( 0.5*(state_probs[n-1]+state_probs[n]) ) + compute_log_prob_n( state_probs, n - 2 );
}

// Compute state probabilities
var compute_state_probs = function( left, right, node_age )
{
    // Get branch lengths
    var tLeft  = node_age - left.age;
    var tRight = node_age - right.age;

    // Compute left state probs in
    var pL00 = 0.5 + 0.5 * Math.exp( - 2.0 * tLeft );
    var pL01 = 0.5 - 0.5 * Math.exp( - 2.0 * tLeft );
    var pL10 = pL01;
    var pL11 = pL00;

//    console.log( "left.state_probs = " + left.state_probs );
    var pL = sum_product_n( left.state_probs, pL00, pL01, pL10, pL11, left.state_probs.length - 1 );
//    console.log( "pL = " + pL );

    // Compute right state probs in
    var pR00 = 0.5 + 0.5 * Math.exp( - 2.0 * tRight );
    var pR01 = 0.5 - 0.5 * Math.exp( - 2.0 * tRight );
    var pR10 = pR01;
    var pR11 = pR00;

//    console.log( "right.state_probs = " + right.state_probs );
    var pR = sum_product_n( right.state_probs, pR00, pR01, pR10, pR11, right.state_probs.length - 1 );
//    console.log( "pR = " + pR );

    return element_product_n( pL, pR, pL.length - 1 );
}

// Compute the sum-product
var sum_product_n = function( probs, p00, p01, p10, p11, n )
{
    var p0 = p00 * probs[n-1] + p01 * probs[n];
    var p1 = p10 * probs[n-1] + p11 * probs[n];

    if ( n == 1 )
        return [ p0, p1 ];
    
    return sum_product_n( probs, p00, p01, p10, p11, n-2).concat( p0, p1 );
}

// Compute element product
var element_product_n = function( a, b, n )
{
    if ( n < 0 )
        return [];
    return element_product_n( a, b, n - 1 ).concat( a[n] * b[n] );
}

// Recursive function to convert a tree to a Newick string (with ages and not branch lengths)
var tree_to_Newick = function( tree )
{
    if ( tree.type == "leaf" )
        return tree.index + ":" + tree.age;
    else
        return "(" + tree_to_Newick( tree.left ) + "," + tree_to_Newick( tree.right ) + "):" + tree.age;
}

// Recursive function to convert a tree topology to a Newick string
var top_to_Newick = function( tree )
{
    if ( tree.type == "leaf" )
        return tree.index;
    else
        return "(" + top_to_Newick( tree.left ) + "," + top_to_Newick( tree.right ) + ")";
}


//////// Data //////////

// Specify the data we have
var D = [Â [ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
          [ 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
          [ 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
          [ 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ] ];

// Define the leaves
var leaves = [ leaf(0, D[0]), leaf(1, D[1]), leaf(2, D[2]), leaf(3, D[3]) ]
console.log( "0: " + leaves[0].states );
console.log( "1: " + leaves[1].states );
console.log( "2: " + leaves[2].states );
console.log( "3: " + leaves[3].states );

//////// Core model functions //////////

// Recursive function to randomly build a tree
var cluster = function( trees, max_age )
{
    // Check if we are done
    if ( trees.length <= 1 )
        return trees;

    // Pick two random trees in the trees vector
    var k1 = randomInteger( trees.length );
    var k2 = ( trees.length > 1 ? randomInteger( trees.length - 1 ) : 0 );
    var k3 = ( k2 == k1 ? trees.length - 1 : k2 );
    var i = Math.min( k1, k3);
    var j = Math.max( k1, k3);
//    console.log( "i=" + i, " j=" + j );

    // Find node age
    var t = exponential( {a: 20.0} );
//    var t = 0.05;
    var node_age = max_age + t;
//    console.log( "node_age=" + node_age );
    
    // Combine into a new node; propose t from a suitable distribution
    // Use delayed sampling to compute probs and log prob
    var state_probs = compute_state_probs( trees[i], trees[j], node_age );
    var log_prob    = compute_log_prob_n( state_probs, state_probs.length - 1 );
    var new_node    = node( trees[i], trees[j], node_age, state_probs, log_prob );
//    console.log( "state_probs=" + state_probs );
//    console.log( "log_prob=" + log_prob );
    
    // Factor probability - remove previous factors relating to partial trees
    factor( log_prob - trees[i].log_prob - trees[j].log_prob );
//    console.log( "left_log_prob  = " + trees[i].log_prob );
//    console.log( "right_log_prob = " + trees[j].log_prob );
//    console.log( "factor = "  + (log_prob - trees[i].log_prob - trees[j].log_prob) );

    // Compute new_trees vector
    var vec_a = trees.slice( 0, i );
    var vec_b = trees.slice( i + 1, j );
    var vec_c = trees.slice( j + 1, trees.length );
    var new_trees = [ new_node ].concat( vec_a, vec_b, vec_c );

    // cluster new_trees
    cluster( new_trees, node_age );
}

// Define model
var model = function ()
{
    // Build the tree by random clustering
    factor( leaves[0].log_prob * leaves.length );
    var tree = cluster( leaves, 0.0 )[ 0 ];

    // Convert tree to readable format
    var tree_string = top_to_Newick( tree );

    // Return tree
    return tree_string;
}

///////// Inference ////////

// Do inference
var dist = Infer( {model: model, method: 'SMC', particles: 10000 } );
dist;


